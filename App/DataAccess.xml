<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DataAccess</name>
    </assembly>
    <members>
        <member name="T:DataAccess.MantenimentDades">
            <summary>
            Clase para realizar operaciones de mantenimiento de datos en una base de datos SQL.
            </summary>
            <remarks>
            Esta clase ofrece funcionalidades como consultas, actualizaciones y ejecución de transacciones
            en una base de datos SQL mediante ADO.NET.
            </remarks>
        </member>
        <member name="F:DataAccess.MantenimentDades._connectionString">
            <summary>
            Cadena de conexión a la base de datos.
            </summary>
        </member>
        <member name="M:DataAccess.MantenimentDades.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:DataAccess.MantenimentDades"/> con la cadena de conexión especificada.
            </summary>
            <param name="connectionString">La cadena de conexión a la base de datos.</param>
            <remarks>
            Este constructor crea una nueva instancia de la clase <see cref="T:DataAccess.MantenimentDades"/> y establece
            la conexión a la base de datos usando la cadena de conexión proporcionada.
            </remarks>
        </member>
        <member name="M:DataAccess.MantenimentDades.PortarTaula(System.String)">
            <summary>
            Obtiene todos los registros de una tabla especificada en la base de datos.
            </summary>
            <param name="nomTaula">Nombre de la tabla a obtener.</param>
            <returns>
            Un <see cref="T:System.Data.DataSet"/> que contiene los datos de la tabla.
            Si ocurre un error, devuelve <c>null</c>.
            </returns>
            <remarks>
            Este método abre una conexión con la base de datos y ejecuta una consulta SELECT para obtener
            todos los registros de la tabla especificada. Los resultados se devuelven en un <see cref="T:System.Data.DataSet"/>.
            </remarks>
            <example>
            Ejemplo de uso:
            <code>
            MantenimentDades db = new MantenimentDades(connectionString);
            DataSet result = db.PortarTaula("Clientes");
            </code>
            </example>
        </member>
        <member name="M:DataAccess.MantenimentDades.PortarPerConsulta(System.String)">
            <summary>
            Ejecuta una consulta SQL y devuelve los resultados como un <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="query">La consulta SQL a ejecutar.</param>
            <returns>
            Un <see cref="T:System.Data.DataSet"/> que contiene los datos resultantes de la consulta.
            Si ocurre un error, devuelve <c>null</c>.
            </returns>
            <remarks>
            Este método permite ejecutar cualquier consulta SQL que no esté directamente relacionada
            con una tabla específica. Los resultados se devuelven en un <see cref="T:System.Data.DataSet"/>.
            </remarks>
            <example>
            Ejemplo de uso:
            <code>
            string query = "SELECT * FROM Clientes WHERE Edad > 30";
            DataSet result = db.PortarPerConsulta(query);
            </code>
            </example>
        </member>
        <member name="M:DataAccess.MantenimentDades.Actualitzar(System.String,System.Data.DataSet,System.String)">
            <summary>
            Actualiza la base de datos utilizando un conjunto de datos y una consulta SELECT.
            </summary>
            <param name="querySelect">La consulta SELECT para seleccionar los datos a actualizar.</param>
            <param name="ds">El <see cref="T:System.Data.DataSet"/> que contiene los cambios a aplicar en la base de datos.</param>
            <param name="nomTaula">El nombre de la tabla en el <see cref="T:System.Data.DataSet"/>.</param>
            <returns>
            El número de filas afectadas por la actualización. Devuelve <c>-1</c> si ocurre un error.
            </returns>
            <remarks>
            Este método realiza una actualización en la base de datos utilizando un <see cref="T:System.Data.DataSet"/>
            que contiene las modificaciones a aplicar en la tabla especificada.
            </remarks>
            <example>
            Ejemplo de uso:
            <code>
            DataSet ds = new DataSet();
            ds.Tables["Clientes"].Rows[0]["Nombre"] = "Nuevo Nombre";
            int result = db.Actualitzar("SELECT * FROM Clientes", ds, "Clientes");
            </code>
            </example>
        </member>
        <member name="M:DataAccess.MantenimentDades.Executa(System.String)">
            <summary>
            Ejecuta una consulta SQL no selectiva (INSERT, UPDATE, DELETE).
            </summary>
            <param name="query">La consulta SQL a ejecutar.</param>
            <returns>
            El número de filas afectadas por la operación. Devuelve <c>-1</c> si ocurre un error.
            </returns>
            <remarks>
            Este método se utiliza para ejecutar consultas que modifican la base de datos, como INSERT,
            UPDATE o DELETE. Los resultados devueltos indican cuántas filas fueron afectadas.
            </remarks>
            <example>
            Ejemplo de uso:
            <code>
            string query = "DELETE FROM Clientes WHERE Edad &lt; 18";
            int rowsAffected = db.Executa(query);
            </code>
            </example>
        </member>
        <member name="M:DataAccess.MantenimentDades.GeneraConsultaCerca(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Genera una consulta de búsqueda con múltiples criterios y devuelve los resultados en un <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="nomTaula">Nombre de la tabla en la que buscar.</param>
            <param name="criteris">Diccionario de criterios de búsqueda, donde la clave es el nombre de la columna y el valor es el valor a buscar.</param>
            <returns>Un <see cref="T:System.Data.DataSet"/> con los resultados de la búsqueda.</returns>
            <remarks>
            Este método genera dinámicamente una consulta SQL para buscar registros en una tabla según múltiples criterios especificados.
            Los criterios de búsqueda son proporcionados como un diccionario de claves y valores.
            </remarks>
            <example>
            <code>
            var criteris = new Dictionary&lt;string, object&gt; { { "Edad", 30 }, { "Nombre", "Juan" } };
            DataSet result = db.GeneraConsultaCerca("Clientes", criteris);
            </code>
            </example>
        </member>
        <member name="M:DataAccess.MantenimentDades.ExecutaStoredProcedure(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Ejecuta un procedimiento almacenado con parámetros opcionales y devuelve los resultados en un <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="nomProc">Nombre del procedimiento almacenado.</param>
            <param name="parametres">Diccionario de parámetros, donde la clave es el nombre del parámetro y el valor es el valor del parámetro.</param>
            <returns>Un <see cref="T:System.Data.DataSet"/> con los resultados del procedimiento almacenado.</returns>
            <remarks>
            Este método ejecuta un procedimiento almacenado en la base de datos, con la posibilidad de pasar parámetros opcionales.
            Los parámetros se agregan al comando antes de ejecutar el procedimiento.
            </remarks>
            <example>
            <code>
            var parametros = new Dictionary&lt;string, object&gt; { { "idCliente", 5 } };
            DataSet result = db.ExecutaStoredProcedure("ObtenerClientePorId", parametros);
            </code>
            </example>
        </member>
        <member name="M:DataAccess.MantenimentDades.IniciarTransaccio">
            <summary>
            Inicia una transacción en la conexión de la base de datos.
            </summary>
            <remarks>
            Este método abre una conexión a la base de datos y comienza una transacción, que puede ser confirmada o cancelada posteriormente.
            </remarks>
            <example>
            Ejemplo de uso:
            <code>
            db.IniciarTransaccio();
            </code>
            </example>
        </member>
        <member name="M:DataAccess.MantenimentDades.ConfirmarTransaccio">
            <summary>
            Confirma la transacción en curso y cierra la conexión.
            </summary>
            <remarks>
            Este método confirma todos los cambios realizados en la transacción y cierra la conexión a la base de datos.
            </remarks>
            <example>
            Ejemplo de uso:
            <code>
            db.ConfirmarTransaccio();
            </code>
            </example>
        </member>
        <member name="M:DataAccess.MantenimentDades.CancelarTransaccio">
            <summary>
            Cancela la transacción en curso y cierra la conexión.
            </summary>
            <remarks>
            Este método revierte todos los cambios realizados durante la transacción y cierra la conexión a la base de datos.
            </remarks>
            <example>
            Ejemplo de uso:
            <code>
            db.CancelarTransaccio();
            </code>
            </example>
        </member>
        <member name="T:DataAccess.SecureCoreG4DataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:DataAccess.SecureCoreG4DataSet.SpeciesDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:DataAccess.SecureCoreG4DataSet.SpeciesRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:DataAccess.SecureCoreG4DataSet.SpeciesRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:DataAccess.SecureCoreG4DataSetTableAdapters.SpeciesTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:DataAccess.SecureCoreG4DataSetTableAdapters.TableAdapterManager">
             <summary>
            TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
            </summary>
        </member>
        <member name="M:DataAccess.SecureCoreG4DataSetTableAdapters.TableAdapterManager.UpdateUpdatedRows(DataAccess.SecureCoreG4DataSet,System.Collections.Generic.List{System.Data.DataRow},System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Update rows in top-down order.
            </summary>
        </member>
        <member name="M:DataAccess.SecureCoreG4DataSetTableAdapters.TableAdapterManager.UpdateInsertedRows(DataAccess.SecureCoreG4DataSet,System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Insert rows in top-down order.
            </summary>
        </member>
        <member name="M:DataAccess.SecureCoreG4DataSetTableAdapters.TableAdapterManager.UpdateDeletedRows(DataAccess.SecureCoreG4DataSet,System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Delete rows in bottom-up order.
            </summary>
        </member>
        <member name="M:DataAccess.SecureCoreG4DataSetTableAdapters.TableAdapterManager.GetRealUpdatedRows(System.Data.DataRow[],System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
            </summary>
        </member>
        <member name="M:DataAccess.SecureCoreG4DataSetTableAdapters.TableAdapterManager.UpdateAll(DataAccess.SecureCoreG4DataSet)">
             <summary>
            Update all changes to the dataset.
            </summary>
        </member>
        <member name="T:DataAccess.SecureCoreG4DataSetTableAdapters.TableAdapterManager.UpdateOrderOption">
             <summary>
            Update Order Option
            </summary>
        </member>
        <member name="T:DataAccess.SecureCoreG4DataSetTableAdapters.TableAdapterManager.SelfReferenceComparer">
             <summary>
            Used to sort self-referenced table's rows
            </summary>
        </member>
    </members>
</doc>
